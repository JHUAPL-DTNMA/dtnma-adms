module ietf-amm {
  yang-version 1.1;
  namespace "ari://ietf-amm/";
  prefix amm;
  amm:enum 0;

  organization
    "IETF Delay Tolerant Networking (DTN) Working Group";
  contact
    "WG Web: <http://tools.ietf.org/wg/dtn/>
     WG List: <mailto:dtn@ietf.org>

     Author: Brian Sipos
             <mailto:brian.sipos+ietf@gmail.com>";
  description
    "This module defines the DTN Management Architecture (DTNMA)
     Application Management Model (AMM) extensions within YANG.
     It also defines the base TYPEDEF objects.";
  reference
    "draft-ietf-dtn-adm-yang";

  revision 2024-07-03 {
    description
      "Updated for latest ADM document.";
    reference
      "draft-ietf-dtn-adm-yang";
  }
  revision 2023-06-08 {
    description
      "Updated for latest AMM contents.";
    reference
      "draft-birrane-dtn-adm";
  }
  revision 2016-04-01 {
    description
      "Updated to fix typos.";
    reference
      "draft-bsipos-dtn-amp-yang";
  }
  revision 2016-03-14 {
    description
      "Initial draft release.";
    reference
      "draft-bsipos-dtn-amp-yang";
  }

  /*
   * This section contains extensions for common behavior of AMM objects.
   */

  extension enum {
    argument value;
    description
      "An enumeration identifies an object within a namespace.
       The argument to this statement is the integer value.";
  }

  extension parameter {
    argument name;
    description
      "The schema for a formal parameter of an object.
       Order of parameters is significant within this statement.";
  }

  extension default {
    argument value;
    description
      "The literal value default for a parameter or result.
       The argument is the text form of the ARI";
  }

  extension init-value {
    argument value;
    description
      "The literal value of a CONST object,
       initial state for a VAR object.
       The argument is the text form of the ARI";
  }

  extension init-expr {
    argument expr;
    description
      "An expression evaluated to initialize a VAR object.
       The argument is the text form of the EXPR AC";
  }

  /*
   * This section contains extensions for AMM object definitions.
   */

  extension typedef {
    argument name;
    description
      "Definition of a TYPEDEF within an ADM.
       The argument to this statement is the object name.
       One of the type use substatements must be present.";
  }

  extension ident {
    argument name;
    description
      "Definition of an IDENT within an ADM.
       The argument to this statement is the object name.
       An 'base' substatement must be present.";
  }

  extension base {
    argument name;
    description
      "The argument is the base of an IDENT object.";
  }

  extension const {
    argument name;
    description
      "Definition of a CONST within an ADM.
       The argument to this statement is the object name.
       An 'init-value' substatement must be present.";
  }

  extension ctrl {
    argument name;
    description
      "Definition of a CTRL within an ADM.
       The argument to this statement is the object name.";
  }

  extension result {
    argument name;
    description
      "A result value reported as a response to a control.
       The substatement is the result type.
       Each CTRL can have a single optional result.";
  }

  extension edd {
    argument name;
    description
      "Definition of an EDD within an ADM.
       The argument to this statement is the object name.";
  }

  extension oper {
    argument name;
    description
      "Definition of an OPER within an ADM.
       The argument to this statement is the object name.";
  }

  extension operand {
    argument name;
    description
      "An individual operand taken from the expression stack
       during evaluation of the OPER.
       Each substatement is an operand as a leaf (ARI).
       Order of operands is significant within an object definition.";
  }

  extension var {
    argument name;
    description
      "Definition of a VAR within an ADM.
       The argument to this statement is the object name.";
  }

  /*
   * This section contains extensions for defining semantic type instances.
   */

  extension type {
    argument name;
    description
      "A reference to a built-in type or prefix-qualified typedef.";
  }

  extension display-hint {
    argument ident;
    description
      "Reference an IDENT object which indicates how a value should be
       displayed for human consumption.
       The base of the IDENT is the ./IDENT/display-hint object.";
  }

  extension int-labels {
    description
      "Type narrowing for an INTEGER to label enum values or bit positions.";
  }

  extension cddl {
    argument text;
    description
      "Type narrowing for a CBOR item in the form of CDDL syntax.
       The argument to this statement is the actual CDDL text.";
  }

  extension ulist {
    description
      "Type for an AC containing a list of uniform-typed values.";
  }

  extension dlist {
    description
      "Type for an AC containing a list of diverse-typed sequences.";
  }

  extension seq {
    description
      "A sequence of uniform-typed values within a 'dlist'.";
  }

  extension umap {
    description
      "Type for an AM containing a set of uniform-typed key-value pairs.";
  }

  extension keys {
    description
      "The type restriction for 'umap' keys.";
  }

  extension values {
    description
      "The type restriction for 'umap' values.";
  }

  extension tblt {
    description
      "Type for a table of values with a column schema.";
  }

  extension column {
    argument name;
    description
      "An individual column within a 'tblt' definition.";
  }

  extension key {
    argument columns;
    description
      "Names of columns composing the row key, separated by spaces,
       within a 'tblt' definition.";
  }

  extension unique {
    argument columns;
    description
      "Names of columns composing a uniqueness constraint, separated by
       spaces, within a 'tblt' definition.";
  }

  extension union {
    description
      "Type for a union of other types.";
  }

  amm:ident display-hint {
    amm:enum 0;
    description
      "The base IDENT for objects usable as arguments for the
       'amm:display-hint' extension.
       This object itself provides no display hint purpose.";
  }
  amm:ident display-hint-integer {
    amm:base "./IDENT/display-hint";
    description
      "Intermediate base IDENT of display hints for integer values.";
  }
  amm:ident display-int-dec {
    amm:base "./IDENT/display-hint-integer";
    description
      "Display integers as decimal (base 10).";
  }
  amm:ident display-int-bin {
    amm:base "./IDENT/display-hint-integer";
    description
      "Display integers as binary (base 2).";
  }
  amm:ident display-int-hex {
    amm:base "./IDENT/display-hint-integer";
    description
      "Display integers as hexadecimal (base 16).";
  }
  amm:ident display-hint-float {
    amm:base "./IDENT/display-hint";
    description
      "Intermediate base IDENT of display hints for floating point values.";
  }
  amm:ident display-float-dec {
    amm:base "./IDENT/display-hint-float";
    description
      "Display floating point values as decimal fraction.";
  }
  amm:ident display-float-exp {
    amm:base "./IDENT/display-hint-float";
    description
      "Display floating point values as decimal exponential form.";
  }
  amm:ident display-float-hex {
    amm:base "./IDENT/display-hint-float";
    description
      "Display floating point values as hexadecimal exponential form.";
  }
  amm:ident display-hint-bstr {
    amm:base "./IDENT/display-hint";
    description
      "Intermediate base IDENT of display hints for BYTESTR values.";
  }
  amm:ident display-bstr-text {
    amm:base "./IDENT/display-hint-bstr";
    reference
      "draft-ietf-dtn-ari";
    description
      "Display byte string values as UTF-8 text where possible.
       The base16 encoding is used otherwise.";
  }
  amm:ident display-bstr-base16 {
    amm:base "./IDENT/display-hint-bstr";
    reference
      "draft-ietf-dtn-ari";
    description
      "Display byte string values as base16-encoded.";
  }
  amm:ident display-bstr-base64 {
    amm:base "./IDENT/display-hint-bstr";
    reference
      "draft-ietf-dtn-ari";
    description
      "Display byte string values as base64url-encoded.";
  }
  amm:ident display-hint-time {
    amm:base "./IDENT/display-hint";
    description
      "Intermediate base IDENT of display hints for TP and TD values.";
  }
  amm:ident display-time-text {
    amm:base "./IDENT/display-hint-time";
    reference
      "draft-ietf-dtn-ari";
    description
      "Display TP and TD values as text in accordance with RFC 3339.";
  }
  amm:ident display-time-dec {
    amm:base "./IDENT/display-hint-time";
    reference
      "draft-ietf-dtn-ari";
    description
      "Display TP and TD values as decimal fraction.";
  }

  // Named type unions
  amm:typedef TYPE-REF {
    amm:union {
      amm:type "/ARITYPE/ARITYPE";
      amm:type "/ARITYPE/TYPEDEF";
    }
    description
      "Reference to either a literal type or a typedef.";
  }
  amm:typedef INTEGER {
    amm:union {
      amm:type "/ARITYPE/BYTE";
      amm:type "/ARITYPE/UINT";
      amm:type "/ARITYPE/INT";
      amm:type "/ARITYPE/UVAST";
      amm:type "/ARITYPE/VAST";
    }
    description
      "Any type which represents a discrete integer.";
  }
  amm:typedef FLOAT {
    amm:union {
      amm:type "/ARITYPE/REAL32";
      amm:type "/ARITYPE/REAL64";
    }
    description
      "Any type which represents a floating point number.";
  }
  amm:typedef NUMERIC {
    amm:union {
      amm:type "./TYPEDEF/INTEGER";
      amm:type "./TYPEDEF/FLOAT";
    }
    description
      "Any type which can be used with numeric expressions.";
  }
  amm:typedef PRIMITIVE {
    amm:union {
      amm:type "/ARITYPE/NULL";
      amm:type "/ARITYPE/BOOL";
      amm:type "./TYPEDEF/NUMERIC";
      amm:type "/ARITYPE/TEXTSTR";
      amm:type "/ARITYPE/BYTESTR";
    }
    description
      "Any primitive type.";
  }
  amm:typedef TIME {
    amm:union {
      amm:type "/ARITYPE/TP";
      amm:type "/ARITYPE/TD";
    }
    description
      "Any type which can be used with time expressions.";
  }
  amm:typedef SIMPLE {
    amm:union {
      amm:type "./TYPEDEF/PRIMITIVE";
      amm:type "./TYPEDEF/TIME";
    }
    description
      "Any type which contains a single literal value (not nested).";
  }
  amm:typedef NESTED {
    amm:union {
      amm:type "/ARITYPE/AC";
      amm:type "/ARITYPE/AM";
      amm:type "/ARITYPE/TBL";
    }
    description
      "A literal type which contains other ARI values.";
  }
  amm:typedef ANY {
    // These type names are built-in
    amm:union {
      amm:type "/ARITYPE/LITERAL";
      amm:type "/ARITYPE/OBJECT";
    }
    description
      "Any value representable by an ARI.";
  }
  amm:typedef VALUE-OBJ {
    amm:union {
      amm:type "/ARITYPE/CONST";
      amm:type "/ARITYPE/EDD";
      amm:type "/ARITYPE/VAR";
    }
    description
      "A reference to an object which can produce a value.";
  }
  amm:typedef NONCE {
    amm:union {
      amm:type "/ARITYPE/BYTESTR";
      amm:type "/ARITYPE/UVAST";
      amm:type "/ARITYPE/NULL";
    }
    description
      "This type union is used to correlate Agent-Manager messages.";
  }

  // operational semantic types
  amm:typedef counter32 {
    amm:type "/ARITYPE/UINT";
    description
      "A 32-bit counter with an arbitrary initial value that only increments.
       When the value reaches the upper range it wraps around to zero.
       At least two samples of this value need to be compared over time.";
  }
  amm:typedef counter64 {
    amm:type "/ARITYPE/UVAST";
    description
      "A 64-bit counter with an arbitrary initial value that only increments.
       When the value reaches the upper range it wraps around to zero.
       At least two samples of this value need to be compared over time.";
  }
  amm:typedef gauge32 {
    amm:type "/ARITYPE/INT";
    description
      "A 32-bit value sampling some quantized measurement.
       The value can increase or decrease arbitrarily over time.";
  }
  amm:typedef gauge64 {
    amm:type "/ARITYPE/VAST";
    description
      "A 64-bit value sampling some quantized measurement.
       The value can increase or decrease arbitrarily over time.";
  }
  amm:typedef timestamp {
    amm:type "/ARITYPE/TP";
    description
      "A time point representing the system clock at which a specific
       occurrence happened.
       The specific occurrence must be defined in the description
       of any node defined using this type.";
  }

  // Restrictions on AC item types for Evaluation and EXPR
  amm:typedef eval-tgt {
    amm:union {
      amm:type "./TYPEDEF/SIMPLE"; // special case of literal value result
      amm:type "./TYPEDEF/VALUE-OBJ"; // produces an eval-tgt
      amm:type "./TYPEDEF/EXPR";
    }
    description
      "A value which can be the target of an evaluation.";
  }
  amm:typedef EXPR-item {
    amm:union {
      amm:type "./TYPEDEF/SIMPLE";
      amm:type "./TYPEDEF/VALUE-OBJ"; // produces an eval-tgt
      amm:type "./TYPEDEF/TYPE-REF"; // treated as unary operator
      amm:type "/ARITYPE/LABEL"; // substitutable label
      amm:type "/ARITYPE/OPER";
    }
    description
      "Each item of an EXPR list.";
  }
  amm:typedef EXPR {
    amm:ulist {
      amm:type "./TYPEDEF/EXPR-item";
    }
    description
      "The contents of an EXPR container.";
  }

  // Restrictions on AC item types for Execution and MAC
  amm:typedef exec-tgt {
    amm:union {
      amm:type "./TYPEDEF/exec-item";
      amm:type "./TYPEDEF/MAC";
    }
    description
      "A value which can be the target of an execution.";
  }
  amm:typedef exec-item {
    amm:union {
      amm:type "/ARITYPE/CTRL";
      amm:type "./TYPEDEF/VALUE-OBJ"; // produces an exec-tgt
    }
    description
      "A reference to an object which can be executed.
       The value-object must be typed to contain an exec-tgt.";
  }
  amm:typedef MAC {
    amm:ulist {
      amm:type "./TYPEDEF/EXEC-item";
    }
    description
      "The contents of a MAC container are an ordered list of
       executable values.";
  }

  // Restrictions on AC item types for Reporting and RPTT
  amm:typedef rpt-tgt {
    amm:union {
      amm:type "./TYPEDEF/VALUE-OBJ"; // produces an RPTT
      amm:type "./TYPEDEF/RPTT";
    }
    description
      "A value which can be the target of reporting.";
  }
  amm:typedef RPTT-item {
    amm:union {
      amm:type "./TYPEDEF/VALUE-OBJ";
      amm:type "./TYPEDEF/EXPR";
    }
    description
      "Each item of a RPTT.
       Each item references a value-producing object or contains an
       expression to be evaluated.";
  }
  amm:typedef RPTT {
    amm:ulist {
      amm:type "./TYPEDEF/RPTT-item";
    }
    description
      "The contents of a report template, encoded as the sequence of items.";
  }
}
